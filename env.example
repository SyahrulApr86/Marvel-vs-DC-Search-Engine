# Marvel vs DC Search Engine - Environment Variables Example
# Copy this file to .env and modify the values as needed

# =================================
# GraphDB Configuration
# =================================

# GraphDB server URL - change based on your setup
# For Docker: http://graphdb:7200/
# For local development: http://localhost:7200/

# RDF Namespace - defaults to GRAPHDB_HOST if not set
# This should match the namespace used in your RDF data
RDF_NAMESPACE=http://localhost:7200/
# For remote server: http://your-graphdb-server:7200/
GRAPHDB_HOST=http://localhost:7200/

# GraphDB repository name (default: kb for Knowledge Base)
GRAPHDB_REPOSITORY=kb

# GraphDB Memory Settings
# Adjust based on your system resources
# Production: 8g or higher, Development: 4g
GDB_HEAP_SIZE=4g

# GraphDB Java Options
# Add additional JVM options if needed
GDB_JAVA_OPTS=-Djava.awt.headless=true

# =================================
# Django Configuration
# =================================

# Django Debug Mode
# Set to False in production, True for development
DJANGO_DEBUG=True

# Django Secret Key
# Generate a new secret key for production
# You can use: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
DJANGO_SECRET_KEY=django-insecure-change-this-in-production

# Allowed Hosts (comma separated)
# Add your domain names for production
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# =================================
# Database Configuration (Optional)
# =================================

# Database URL for production deployment
# For local development, SQLite is used by default
# For production, you might want PostgreSQL or MySQL
# DATABASE_URL=postgresql://user:password@localhost:5432/marveldc
# DATABASE_URL=mysql://user:password@localhost:3306/marveldc
DATABASE_URL=

# =================================
# Application Settings
# =================================

# Data file path for GraphDB initialization
# Path inside Docker container
DATA_FILE=/data/mdc_processed_csv_csv.ttl

# SPARQL Query timeout (seconds)
SPARQL_TIMEOUT=30

# Maximum search results to return
MAX_SEARCH_RESULTS=50

# =================================
# Development Settings
# =================================

# Python debugging
PYTHONUNBUFFERED=1

# Enable Django development tools
DJANGO_DEVELOPMENT=True

# =================================
# Production Settings
# =================================

# Set to production when deploying
ENVIRONMENT=development

# SSL/HTTPS Settings (for production)
USE_HTTPS=False
SECURE_SSL_REDIRECT=False

# Static files settings
STATIC_ROOT=/app/staticfiles
STATIC_URL=/static/

# =================================
# Logging Configuration
# =================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log to file (optional)
LOG_FILE=

# =================================
# Performance Settings
# =================================

# Number of Gunicorn workers for production
GUNICORN_WORKERS=3

# Gunicorn timeout
GUNICORN_TIMEOUT=120

# =================================
# External Services
# =================================

# Wikidata SPARQL endpoint (for additional data)
WIKIDATA_ENDPOINT=https://query.wikidata.org/sparql

# Backup storage location
BACKUP_PATH=./backups

# =================================
# Security Settings
# =================================

# CORS settings (if needed for API access)
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# API rate limiting (requests per minute)
API_RATE_LIMIT=100

# =================================
# Docker-specific Settings
# =================================

# Docker network name
DOCKER_NETWORK=marvel-dc-network

# Container names
GRAPHDB_CONTAINER=marvel-dc-graphdb
WEB_CONTAINER=marvel-dc-webapp
INIT_CONTAINER=marvel-dc-graphdb-init 